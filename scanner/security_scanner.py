#!/usr/bin/env python3
"""
Security Scanner for Terraform Plan
Integrates into CI/CD to enforce security checks (Shift-Left).
"""

import json
import subprocess
import sys
import argparse
import os
import re
from typing import Dict, Any, List

class TerraformSecurityScanner:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ `terraform plan` –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.
    """
    def __init__(self, terraform_dir: str):
        self.vulnerabilities_found = 0
        self.plan_data = None
        self.terraform_dir = os.path.abspath(terraform_dir)

    def run_terraform_command(self, command: List[str]) -> str:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É Terraform –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        try:
            result = subprocess.run(
                command,
                cwd=self.terraform_dir,
                check=True,
                capture_output=True,
                text=True,
                timeout=300
            )
            return result.stdout
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã Terraform: {e}")
            print(f"Stderr: {e.stderr}")
            print(f"Stdout: {e.stdout}")
            sys.exit(1)
        except subprocess.TimeoutExpired:
            print(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {' '.join(command)}")
            sys.exit(1)

    def run_terraform_plan(self) -> str:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É `terraform plan` —Å —Ñ–ª–∞–≥–æ–º -json –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON-–≤—ã–≤–æ–¥.
        """
        print("‚úì –°–æ–∑–¥–∞–Ω–∏–µ Terraform plan –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥ -json –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
        plan_command = ["terraform", "plan", "-input=false", "-json"]
        plan_output = self.run_terraform_command(plan_command)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –ø–æ—Ç–æ–∫–∞ –≤—ã–≤–æ–¥–∞
        plan_json = self.extract_json_from_stream(plan_output)
        
        if not plan_json:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –≤—ã–≤–æ–¥–∞")
            print(f"–ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥: {plan_output}")
            sys.exit(1)
            
        print(f"‚úì –ò–∑–≤–ª–µ—á–µ–Ω JSON –¥–ª–∏–Ω–æ–π {len(plan_json)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º JSON (—É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
        normalized_json = self.normalize_json(plan_json)
        print(f"‚úì –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π JSON –¥–ª–∏–Ω–æ–π {len(normalized_json)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return normalized_json

    def extract_json_from_stream(self, output: str) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –ø–æ—Ç–æ–∫–∞ –≤—ã–≤–æ–¥–∞ terraform plan -json.
        Terraform –≤—ã–≤–æ–¥–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ JSON –æ–±—ä–µ–∫—Ç–æ–≤, –Ω–∞–º –Ω—É–∂–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π (–ø–æ–ª–Ω—ã–π –ø–ª–∞–Ω).
        """
        # –†–∞–∑–¥–µ–ª—è–µ–º –≤—ã–≤–æ–¥ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ –∏—â–µ–º JSON –æ–±—ä–µ–∫—Ç—ã
        lines = output.strip().split('\n')
        json_objects = []
        
        for line in lines:
            line = line.strip()
            if line and (line.startswith('{') and line.endswith('}')):
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ JSON
                    json.loads(line)
                    json_objects.append(line)
                except json.JSONDecodeError:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-JSON —Å—Ç—Ä–æ–∫–∏
                    continue
        
        if not json_objects:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ JSON –≤ –≤—ã–≤–æ–¥–µ")
            print(f"–í—ã–≤–æ–¥: {output}")
            return ""
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é JSON —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø–ª–∞–Ω
        return json_objects[-1]

    def normalize_json(self, json_str: str) -> str:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç JSON, —É–¥–∞–ª—è—è –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ,
        —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Å—Ä–µ–¥–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
        """
        try:
            # –ü–∞—Ä—Å–∏–º –∏ —Å–Ω–æ–≤–∞ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º JSON –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
            parsed_json = json.loads(json_str)
            return json.dumps(parsed_json, separators=(',', ':'))
        except json.JSONDecodeError as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å JSON: {e}")
            return json_str

    def parse_plan(self, plan_json: str) -> None:
        """–ü–∞—Ä—Å–∏—Ç JSON –≤—ã–≤–æ–¥ –ø–ª–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –∞—Ç—Ä–∏–±—É—Ç–µ."""
        try:
            self.plan_data = json.loads(plan_json)
            print("‚úì JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
        except json.JSONDecodeError as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: {e}")
            print(f"–ü—Ä–æ–±–ª–µ–º–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ {e.pos}: {plan_json[max(0, e.pos-50):e.pos+50]}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            with open("debug_plan.json", "w") as f:
                f.write(plan_json)
            print("‚úì JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª debug_plan.json –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
            sys.exit(1)

    def parse_plan(self, plan_json: str) -> None:
        """–ü–∞—Ä—Å–∏—Ç JSON –≤—ã–≤–æ–¥ –ø–ª–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –∞—Ç—Ä–∏–±—É—Ç–µ."""
        try:
            self.plan_data = json.loads(plan_json)
            print("‚úì JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
        except json.JSONDecodeError as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: {e}")
            print(f"–ü—Ä–æ–±–ª–µ–º–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ {e.pos}: {plan_json[max(0, e.pos-50):e.pos+50]}")
            print(f"–ü–æ–ª–Ω—ã–π JSON: {plan_json}")
            sys.exit(1)

    def check_insecure_cidr(self, resource: Dict[str, Any]) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª CIDR."""
        if resource['type'] == "null_resource" and 'insecure_sg' in resource.get('name', ''):
            values = resource.get('values', {})
            triggers = values.get('triggers', {})
            
            rule_json = triggers.get('rule')
            if rule_json:
                try:
                    rule = json.loads(rule_json)
                    cidr = rule.get('cidr', '')
                    port = rule.get('port', '')
                    
                    if cidr == "0.0.0.0/0" and port in [22, 3389]:
                        self.report_vulnerability(
                            resource['type'],
                            resource['name'],
                            "INSECURE_CIDR",
                            f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –ø–æ—Ä—Ç {port} –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ (0.0.0.0/0)"
                        )
                except json.JSONDecodeError:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –≤ —Ç—Ä–∏–≥–≥–µ—Ä–∞—Ö —Ä–µ—Å—É—Ä—Å–∞ {resource['name']}")

    def check_unencrypted_disks(self, resource: Dict[str, Any]) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤."""
        if resource['type'] == "null_resource" and 'unencrypted' in resource.get('name', ''):
            values = resource.get('values', {})
            triggers = values.get('triggers', {})
            
            config_json = triggers.get('config')
            if config_json:
                try:
                    config = json.loads(config_json)
                    encrypted = config.get('encrypted', True)
                    
                    if not encrypted:
                        self.report_vulnerability(
                            resource['type'],
                            resource['name'],
                            "UNENCRYPTED_DISK",
                            "–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏—Å–∫. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ."
                        )
                except json.JSONDecodeError:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –≤ —Ç—Ä–∏–≥–≥–µ—Ä–∞—Ö —Ä–µ—Å—É—Ä—Å–∞ {resource['name']}")

    def report_vulnerability(self, resource_type: str, resource_name: str, vuln_code: str, message: str) -> None:
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        self.vulnerabilities_found += 1
        print(f"\n--- üî¥ SECURITY ALERT ---")
        print(f"Resource: {resource_type}.{resource_name}")
        print(f"Code: {vuln_code}")
        print(f"Message: {message}")
        print("--------------------------\n")

    def scan(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ Terraform Security Scanner –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {self.terraform_dir}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å Terraform-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        if not os.path.exists(self.terraform_dir):
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {self.terraform_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            sys.exit(1)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Terraform-—Ñ–∞–π–ª—ã
        tf_files = [f for f in os.listdir(self.terraform_dir) if f.endswith('.tf')]
        if not tf_files:
            print(f"‚ùå –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {self.terraform_dir} –Ω–µ—Ç .tf —Ñ–∞–π–ª–æ–≤!")
            sys.exit(1)
            
        print("–≠—Ç–∞–ø 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Terraform...")
        self.run_terraform_command(["terraform", "init"])

        print("–≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ Terraform...")
        plan_json = self.run_terraform_plan()

        print("–≠—Ç–∞–ø 3: –ü–∞—Ä—Å–∏–Ω–≥ –ø–ª–∞–Ω–∞...")
        self.parse_plan(plan_json)

        print("–≠—Ç–∞–ø 4: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏...")
        resources = self.plan_data.get('planned_values', {}).get('root_module', {}).get('resources', [])
        for resource in resources:
            self.check_insecure_cidr(resource)
            self.check_unencrypted_disks(resource)

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("=" * 50)
        print("üìä SCAN SUMMARY")
        print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {len(resources)}")
        print(f"–ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {self.vulnerabilities_found}")
        print("=" * 50)

        if self.vulnerabilities_found > 0:
            print("‚ùå –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏. –ü–∞–π–ø–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            sys.exit(1)
        else:
            print("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            sys.exit(0)

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∫—Ä–∏–ø—Ç."""
    parser = argparse.ArgumentParser(description='Security Scanner for Terraform Plan')
    parser.add_argument('--tf-dir', 
                        default='..', 
                        help='–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å Terraform-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)')
    args = parser.parse_args()

    scanner = TerraformSecurityScanner(args.tf_dir)
    scanner.scan()

if __name__ == "__main__":
    main()